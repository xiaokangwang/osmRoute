// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	Resolve(ctx context.Context, in *ObjectResolveRequest, opts ...grpc.CallOption) (*ReturnedObject, error)
	ScanRegion(ctx context.Context, in *ScanRegionRequest, opts ...grpc.CallOption) (*ObjectListWithAssociatedObjects, error)
	GetAssociatedObject(ctx context.Context, in *GetAssociatedObjectRequest, opts ...grpc.CallOption) (*ObjectList, error)
	SearchByNamePrefix(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*NameList, error)
	SearchByNameExact(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*ObjectList, error)
	Route(ctx context.Context, in *RoutingDecisionReq, opts ...grpc.CallOption) (*RoutingDecisionResp, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) Resolve(ctx context.Context, in *ObjectResolveRequest, opts ...grpc.CallOption) (*ReturnedObject, error) {
	out := new(ReturnedObject)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) ScanRegion(ctx context.Context, in *ScanRegionRequest, opts ...grpc.CallOption) (*ObjectListWithAssociatedObjects, error) {
	out := new(ObjectListWithAssociatedObjects)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/ScanRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetAssociatedObject(ctx context.Context, in *GetAssociatedObjectRequest, opts ...grpc.CallOption) (*ObjectList, error) {
	out := new(ObjectList)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/GetAssociatedObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) SearchByNamePrefix(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*NameList, error) {
	out := new(NameList)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/SearchByNamePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) SearchByNameExact(ctx context.Context, in *NameSearch, opts ...grpc.CallOption) (*ObjectList, error) {
	out := new(ObjectList)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/SearchByNameExact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) Route(ctx context.Context, in *RoutingDecisionReq, opts ...grpc.CallOption) (*RoutingDecisionResp, error) {
	out := new(RoutingDecisionResp)
	err := c.cc.Invoke(ctx, "/rpc.RouteService/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility
type RouteServiceServer interface {
	Resolve(context.Context, *ObjectResolveRequest) (*ReturnedObject, error)
	ScanRegion(context.Context, *ScanRegionRequest) (*ObjectListWithAssociatedObjects, error)
	GetAssociatedObject(context.Context, *GetAssociatedObjectRequest) (*ObjectList, error)
	SearchByNamePrefix(context.Context, *NameSearch) (*NameList, error)
	SearchByNameExact(context.Context, *NameSearch) (*ObjectList, error)
	Route(context.Context, *RoutingDecisionReq) (*RoutingDecisionResp, error)
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (UnimplementedRouteServiceServer) Resolve(context.Context, *ObjectResolveRequest) (*ReturnedObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedRouteServiceServer) ScanRegion(context.Context, *ScanRegionRequest) (*ObjectListWithAssociatedObjects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanRegion not implemented")
}
func (UnimplementedRouteServiceServer) GetAssociatedObject(context.Context, *GetAssociatedObjectRequest) (*ObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociatedObject not implemented")
}
func (UnimplementedRouteServiceServer) SearchByNamePrefix(context.Context, *NameSearch) (*NameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByNamePrefix not implemented")
}
func (UnimplementedRouteServiceServer) SearchByNameExact(context.Context, *NameSearch) (*ObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByNameExact not implemented")
}
func (UnimplementedRouteServiceServer) Route(context.Context, *RoutingDecisionReq) (*RoutingDecisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Resolve(ctx, req.(*ObjectResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_ScanRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).ScanRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/ScanRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).ScanRegion(ctx, req.(*ScanRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetAssociatedObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssociatedObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetAssociatedObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/GetAssociatedObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetAssociatedObject(ctx, req.(*GetAssociatedObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_SearchByNamePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).SearchByNamePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/SearchByNamePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).SearchByNamePrefix(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_SearchByNameExact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).SearchByNameExact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/SearchByNameExact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).SearchByNameExact(ctx, req.(*NameSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingDecisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouteService/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Route(ctx, req.(*RoutingDecisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _RouteService_Resolve_Handler,
		},
		{
			MethodName: "ScanRegion",
			Handler:    _RouteService_ScanRegion_Handler,
		},
		{
			MethodName: "GetAssociatedObject",
			Handler:    _RouteService_GetAssociatedObject_Handler,
		},
		{
			MethodName: "SearchByNamePrefix",
			Handler:    _RouteService_SearchByNamePrefix_Handler,
		},
		{
			MethodName: "SearchByNameExact",
			Handler:    _RouteService_SearchByNameExact_Handler,
		},
		{
			MethodName: "Route",
			Handler:    _RouteService_Route_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "def.proto",
}
